#include <iostream>
#include<iomanip>
#include <ctime>

using namespace std;
int emp_num, id ,total_emp=0;
int choice;
//diclaring the stucture date
struct date{
    int dd,mm,yyy;
};

//diclaring the structure paymenent
struct payment{
  float basicSalary;
    float overTime;
    float incomeTax;
    float netPay;
    };

//diclaring the structure address
struct address{
  string city, phoneNumber;
};
//diclaring the variable Employee
struct Employee{
  string full_name, edu_level, category;
  int age;
  int phon_num, empId, experience;
  //string category;
  char sex;
     date currentDate{ltm->tm_mday, 1 + ltm->tm_mon, 1900 + ltm->tm_year}, startingDate;
    payment pay;
    address empAddress;
}temp;
//function diclation

Employee dataIn(Employee emp[]);
Employee dataDisp(Employee *emp);
void Search(Employee *emp);
void update(Employee *emp);
void Delete(Employee* emp);
Employee Sort(Employee emp[]);
void Rank(Employee emp[]);
void Expi(Employee emp[]);
void menu();

int main()
{
    menu();
    return 0;
}

void menu()
{
system("cls");
    menustart:
    
    Employee emp[5000];
    
    cout<< "\t\t\t******************************************************************\n";
    cout<< "\t\t\t//////////     Employee management system         ///////////////\n";
    cout<< "\t\t\t******************************************************************\n";
    
    cout<<"\t\t\t1.Add Record\n";
    cout<<"\t\t\t2.Display Record\n";
    cout<<"\t\t\t3.Modify Record\n";
    cout<<"\t\t\t4.Delete Record\n";
    cout<<"\t\t\t5.Search Record\n";
    cout<<"\t\t\t6.Sort record\n";
    cout<<"\t\t\t7.Statstics \n";
    cout<<"\t\t\t8.Pension Employees \n";
    cout<<"\t\t\t0.Exit \n";
    cout<< "\t\t\tchoice option:[1/2/3/4/5/6/7/8/0]\n";
    cout<< "\t\t\tEnter your choice: ";
    int choice;
    cin>>choice;

    switch(choice){
        case 1:
             dataIn(emp);
             system("cls");
             goto menustart;
             break;
        case 2:
             dataDisp(emp);
             break;
        case 3:
             update(emp);
             break;
        case 4:
            Delete(emp);
            break;
        case 5:
            Search(emp);
            break;
        case 6:
            Sort(emp);
            cout<< "\t\t\tyour command is done successfully \n display the data to see rank of the employee\n";
            break;
        case 7:
           statstics(emp);
            break;
        case 8:
             pension(emp);
             break; 
        case 0:
            goto a;
            break;
         default : cout<<"Invalid choice...Try again...";
         }
        cout<< "\n\t\t\tdo you want to continue? y/n: ";
        char menus;
        cin>> menus;
        if (menus == 'y' || menus == 'Y'){
        system("cls");
        cout<< endl<<endl;
        goto menustart;
        a: system("exit");
        }
}

Employee dataIn(Employee *emp)
{

    for (int i=total_emp; i<emp_num + total_emp; i++){
    cout<< "insert the detail of Employee : \n";
      emp[i].empId = i+1;
    cout<< "Enter the name of the user: "<< endl;
      cin.ignore();
      getline(cin,emp[i].full_name);
    cout<<"enter age : ";
      cin>>emp[i].age;
a: cout<<"enter sex 'm' or 'f' : ";
      cin>>emp[i].sex;
      if(emp[i].sex!='m' && emp[i].sex!='f'){
        cout<<"invalid input \n";
        goto a;}
    cout<< "Enter your start date in the organization for employee: "<< emp[i].empId;
    cout<< "\n date: ";
      cin>>emp[i].startingDate.dd;
    cout<< "\n month: ";
      cin>> emp[i].startingDate.mm;
    cout<< "\n year: ";
      cin>> emp[i].startingDate.yyy;
    cout<<"Basic salary : ";
       cin>>emp[i].pay.basicSalary;
    cout<<"over time : ";
      cin>>emp[i].pay.overTime;
    cout<<"address : ";
      cin>>emp[i].empAddress.city;
    cout<<"phone number : ";
      cin>>emp[i].empAddress.phoneNumber;
    }

    total_emp += emp_num;
    return *emp;
}

void dataDisp(Employee *emp)
{
  system("cls");
  Rank(emp);
  netpayment(emp);
  Expi(emp);
  cout<< "--------------------------------------------------------------------------------------------------------------------------------------------------------------\n";
    cout<< "------------------------------------------------------------------------ DISPLAY RECORD ";
    cout<< "-------------------------------------------------------------------------\n";

    cout<<"NAME"<<setw(32)<<"ID"<<setw(15)<< "SEX"<<setw(15)<<"AGE"<<setw(15)<<"CATEGORY"<<setw(15)<<"SALARY"
    <<setw(15)<<"EXPERIENCE"<<setw(15)<< "LEVEL"<<setw(15)<< "NET PAY"<<endl;
    
    for (int i=0; i<total_emp; i++){
    cout<<emp[i].full_name<< setw(23)<<emp[i].empId<< setw(15)<<emp[i].sex<< setw(15)<<emp[i].age<<setw(15)<<emp[i].empCatagory
    <<setw(15)<<emp[i].pay.basicSalary<<setw(15)<<emp[i].experience<<setw(15)<<emp[i].level<<setw(15)<<emp[i].pay.netPay<<endl;
    }

}

void Delete(Employee* emp)
{
    if(total_emp!=0){
      char select;
   cout<<"\nPress 1 to delete all records !!\n";
   cout<<"\nPress 2 to delete specific record !!\n";
   cin>>select;
      //select=getch();
      if(select=='1'){
    total_emp=0;
    cout<<"\nAll records are deleted...!!! \n";
      }
      else if(select=='2'){
    cout<<"\nEnter the id number of an employee you want to delete : ";
          cin>>id;
  for(int i=0;i<total_emp;i++){
   if(id==emp[i].empId){
  emp[i].full_name="--";
  emp[i].age=0;
  emp[i].pay.basicSalary=0;
  emp[i].sex='-';
  emp[i].startingDate.dd=0;
  emp[i].startingDate.mm=0;
  emp[i].startingDate.yyy=0;
  emp[i].pay.overTime=0;
  emp[i].empAddress.city="--";
  emp[i].empAddress.phoneNumber="---";
  //emp[i].edu_level="--";
  //emp[i].id="--";
      }
   }

   }
    }
    else
  cout<<"\nYour record is empty \n";
}

//upding function to change specific item by searching by employee id

void update(Employee *emp)
{
    if(total_emp!=0){
    cout<<"\nEnter the id number of an employee you want to update : ";
    cin>>id;
    int j;
    for(int i=0;i<total_emp;i++){
	          if(id==emp[i].empId){
                j=i;
            }
        }  
               cout<< "insert the detail of Employee : \n";
               cout<< "Enter the name of the user: "<< endl;
               cin.ignore();
               cin.getline(emp[j].full_name,30);
               cout<<"enter id : ";
               cin>>emp[j].empId;
               cout<<"enter age : ";
               cin>>emp[j].age;
               sex: cout<<"enter sex 'm' or 'f' : ";
               cin>>emp[j].sex;
               if(emp[j].sex!='m' && emp[j].sex!='f'){
                    cout<<"invalid input \n";
                    goto sex;
                    }
                
                cout<<"insert employees education level from these(choice: 1.diploma \n2.degree \n3.masters \n4.phd \n5.professor \nEnter your choice: ";
                cin>>emp[j].eduLevel;
                //setting employees salary based on education level
                if(emp[j].eduLevel==1)
                    {emp[j].pay.basicSalary=1500;}
                else if(emp[j].eduLevel==2)
                    {emp[j].pay.basicSalary=2500;}
                else if(emp[j].eduLevel==3)
                    {emp[j].pay.basicSalary=3500;}
                else if(emp[j].eduLevel==4)
                    {emp[j].pay.basicSalary=5000;}
                else if(emp[j].eduLevel==5)
                    {emp[j].pay.basicSalary=7000;}
                

                cout<<"enter employees category from this( full time, part time, seasonal) : ";
                cin.ignore();
                cin.getline(emp[j].empCatagory,30);
          edate: cout<< "Enter your start date in the organization for employee: ";
       d: cout<< "\n Date: ";
       cin>>emp[j].startingDate.dd;
       if (emp[j].startingDate.dd <1 || emp[j].startingDate.dd >31) {
       cout<< "Please insert the date correctly\n";
       goto d;
       }
       m: cout<< "\n Month: ";
       cin>> emp[j].startingDate.mm;
       if (emp[j].startingDate.mm <1 || emp[j].startingDate.mm >12){
       cout<< "Please insert the date correctly\n";
       goto m;
       }
       y: cout<< "\n Year: ";
       cin>> emp[j].startingDate.yy;
       if (emp[j].startingDate.yy <1940){
       cout<< "Please insert the date correctly\n";
       goto y;
       }
                //checking whether the start day is greater than or not the current day
                if((((emp[j].currentDate.dd/12 + emp[j].currentDate.yy*12 + emp[j].currentDate.mm) -
                      (emp[j].startingDate.dd/12 + emp[j].startingDate.yy*12 + emp[j].startingDate.mm))/12)<0){
                          cout<<"insert the correct day \n";
                          goto edate;
                            }

                cout<<"over time : ";
                cin>>emp[j].pay.overTime;
                cout<<"address : ";
                cin>>emp[j].empAddress.city;
                cout<<"phone number : ";
                cin>>emp[j].empAddress.phoneNumber;
                cout<<"\nSuccessfully Updated!!\n";
	     }
    else
    cout<<"\nYour record is empty \n";
  }

//searching function work by employee id 

void Search(Employee *emp)
{
    if(total_emp!=0){
    cout<<"\nEnter the id number of an employee you want to search : ";
      cin>>id;

    cout<<setw(2)<<"ID"<<setw(15)<<"Name"<<setw(15)<< "SEX"<<setw(15)<<"AGE"<< setw(15)<<"EXPERIENCE"<<setw(15)<<"SALARY"<<endl;
    for(int i=0;i<total_emp;i++){
	 if(id==emp[i].empId){
    cout<<emp[i].empId<< setw(15)<<emp[i].full_name<< setw(15)<<emp[i].sex<< setw(15)<<emp[i].age<<setw(15)
    <<emp[i].pay.basicSalary<<endl;
	 }
}
    }
    else
        cout<<"no recored is found \n";
}
void Rank(Employee emp[])
{
    Expi(emp);
    int i;
    float max_salary=0;
    float max_experience=0;
    float salary_weight, experience_weight;

//sorting maximum salary
    for( i=0; i<total_emp; i++){
        if(emp[i].pay.basicSalary>max_salary){
            max_salary=emp[i].pay.basicSalary;
        }
//sorting maximum experience
        if(emp[i].experience>max_experience){
            max_experience=emp[i].experience;
        }
//employees level formula
    salary_weight=(emp[i].pay.basicSalary/max_salary)*40;
    experience_weight=(emp[i].experience/max_experience)*60;
    emp[i].emp_level=salary_weight + experience_weight;
    }

    for (int i=0; i<total_emp; i++){
    if(emp[i].emp_level>=80 && emp[i].emp_level<=100 ){
          emp[i].level = "first level";
    }
    else if(emp[i].emp_level>=40 && emp[i].emp_level<=79){
          emp[i].level = "second level";
    }
    else if(emp[i].emp_level>=10 && emp[i].emp_level<=39){
          emp[i].level = "third lever";
    }
    else
      emp[i].level = "no level";
  }
}

void Expi(Employee emp[]){
//   computing experience
    for(int i=0; i<total_emp; i++){
    emp[i].experience=((emp[i].currentDate.yy*12 + emp[i].currentDate.mm) -
                       (emp[i].startingDate.yy*12 + emp[i].startingDate.mm))/12;
         }
}

Employee Sort(Employee *emp)
{
 for(int i=0; i<total_emp; i++){
    for(int j=total_emp - 1; j>=i; j--){
            if (emp[i].pay.basicSalary<emp[j].pay.basicSalary){
             temp = emp[i];
            emp[i] = emp[j];
            emp[j] = temp;
            }
        }
    }
 return *emp;
}

